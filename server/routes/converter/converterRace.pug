//- mixin listRaces  
//-     | the available races are 
//-     eachz test in Object.keys(map) with {separator:',', last_separator:'and', end:'.'}
//-         | #{map[test].title.replace(" Alone","")}
include synonyms

mixin percent 
    if(NLG.Scale[0] === 'Percent')
        |%

mixin intro
    | In the #{info.name.data} 
    if(info.year.data.includes("-"))
        | #[+multiYear]
    else 
        | #[+singleYear]
    | #{info.year.data}
    

mixin header 
    | #{NLG.Title}

mixin min 
    eachz el in minArray with {separator:',', last_separator:'and'}
         | #{el}
    if(minArray.length > 1)
        | have 
    else
        | has
    | #[+recorded] the lowest value of #{min} 
    | #[+percent]
    | .

mixin max 
    eachz el in maxArray with {separator:',', last_separator:'and'}
         | #{el}
    if(maxArray.length > 1)
        | have 
    else
        | has
    | #[+recorded] the highest value of #{max} 
    | #[+percent]
    | .

mixin minMax 
    | The
    eachz el in minArray with {separator:',', last_separator:'and'}
         | #{el}
    if(minArray.length > 1)
        | have 
    else
        | has
    | #[+recorded] the values of #{max} 
    | #[+percent]
    | .

mixin rest
    | Of the remaining races #race# has #count# 

mixin total
    | the total #{NLG.Scale[0]} of #[+header] 
    | is #{info.total_est.data} #[+percent]

mixin zero 
    | For the 
    eachz el in zeroArray with {separator:',', last_separator:'and'}
         | #{el}
    | entries in the dataset are #[+recorded] as 0. 

mixin unknown 
    | Entries in the dataset are #[+recorded] as null   
    | for the [
    eachz el in unknownArray with {separator:',', last_separator:'and'}
         | #{el}
    | ] 
    if(unknownArray.length > 1)
        | communities 
    else 
        | community

mixin avg 
    | with #[+anAverage] value of #{avg}
//- ----------------------------------

p
    | #[+intro]
    | #[+total]
    | #[+avg].
    if((minArray && minArray.length > 0) || (maxArray && maxArray.length > 0) && min !== max )
        if(maxArray && maxArray.length > 0)
            | #[+AmongThem]
            | #[+max]
        if(minArray && minArray.length > 0)
            | Whereas
            | #[+min]
    if(minArray && maxArray && min === max)
        | #[+minMax]
    
    //- if(zeroArray && zeroArray.length>0)
    //-     | #[+zero]
    //- if(unknownArray && unknownArray.length>0)
    //-     | #[+unknown]
        
        
//- | #[+rest]